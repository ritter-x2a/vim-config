snippet start "Insert the boilerplate for  a new python script" b
#!/usr/bin/env python3

""" ${1:TODO document}
"""

import argparse

# import os
import sys

# import_path = os.path.join(os.path.dirname(__file__), "..")
# sys.path.append(import_path)

import logging
logger = logging.getLogger(__name__)

def main():
    argparser = argparse.ArgumentParser(description=__doc__)

    argparser.add_argument('-o', '--output', metavar="OUTFILE", default=None,
        help='the output file')

    argparser.add_argument('input', metavar="INFILE",
        help='the input file')

    # args = argparser.parse_args()
    args = parse_args_with_logging(argparser, default_loglevel="info")

    ${0:# TODO write this}

    return 0


def init_logging(loglevel, logfile=None):
    numeric_level = getattr(logging, loglevel.upper(), None)
    if not isinstance(numeric_level, int):
        raise ValueError('Invalid log level: {}'.format(loglevel))

    handlers = [logging.StreamHandler()]
    if logfile is not None:
        handlers.append(logging.FileHandler(logfile))

    kwargs = {
            "format": '%(asctime)s - %(levelname)s:%(name)s: %(message)s',
            "level": numeric_level, "handlers": handlers,
        }

    logging.basicConfig(**kwargs)

def parse_args_with_logging(argparser, default_loglevel="warning"):
    loglevels = ["debug", "info", "warning", "error"]
    argparser.add_argument("-l", "--loglevel", choices=loglevels, default=default_loglevel,
            help="configures the amount of logging information to print")
    argparser.add_argument("--logfile", default=None,
            help="print logs to this file, stdout if none is given")

    args = argparser.parse_args()
    init_logging(args.loglevel, args.logfile)

    return args

if __name__ == "__main__":
    sys.exit(main())
endsnippet
